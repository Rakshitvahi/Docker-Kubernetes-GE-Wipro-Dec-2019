Master
    API SERVER -> POD -> Container -> Docker Image -> GR
    ETCD -> POD -> Container -> Docker Image -> GR
    Controller mgmr -> POD -> Container -> Docker Image -> GR
    Schedular -> POD -> Container -> Docker Image -> GR
    
    Kube Proxy -> POD -> Container -> Docker Image -> GR
    Kubelet
    Docker

Worker
   Kube Proxy -> POD -> Container -> Docker Image -> GR
    Kubelet
    Docker 



Workstation

One Node K8 Clustor - Minikube
--------------------------------
Kubernetes on PAAS
--------------
AWS - EKS
AZURE - AKS
GC - GKE

------------
Manual Installation
    - CLOUD
            PUBLIC - AWS - GC - AZURE 
            PRIVATE - OPENSTAKE - VMware
    -------------------------------
             KOPS
             https://github.com/kubernetes/kops
    - Physical Box or VMs.
            Using Kubeadm

HARDWAY - 
https://github.com/kelseyhightower/kubernetes-the-hard-way
===========================================================

Minkube
    IS VM (LINUX)
    HAS WHAT?
    
    API SERVER -> POD -> Container -> Docker Image -> GR
    ETCD -> POD -> Container -> Docker Image -> GR
    Controller mgmr -> POD -> Container -> Docker Image -> GR
    Schedular -> POD -> Container -> Docker Image -> GR
    
    Kube Proxy -> POD -> Container -> Docker Image -> GR
    Kubelet
    Docker
--------
Pre
    VT MUST BE ENABLED
    VIRTUAL BOX MUST BE INSTALLED

    Download a minikube.exe into c:/minikube
    https://github.com/kubernetes/minikube/releases/latest/download/minikube-installer.exe
    
    Download a kubectl.exe into c:/minikube
    https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/windows/amd64/kubectl.exe

    SET c:/minikube in s env variable and
    $$$$$ minikube init


===========================================================
kubernetes clustor setup using kubeadm.
---------------------------------------------
minimum 2 CPU - 4 GB RAM
Linux 64 BIT
-----------------------
Tools
    Docker
    kubeadm
    kubectl
    Kubelet
----------------------
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
https://www.devopsschool.com/blog/setting-up-kubernetes-clusters-using-kubeadm-manual-way-in-rhel-7-centos7/

13.126.180.65

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.14.69:6443 --token 942di0.n5ij1wxk4sqr46dr --discovery-token-ca-cert-hash sha256:25d17cb97848f19c5ff6a097d5c18d410d41bff9a4b69cb9885be1ad26caeb16

13.233.91.29

 1  clear
    2  kubectl get ns
    3  kubectl get pods
    4  kubectl get pods -n=kube-system
    5  kubectl describe pod coredns-5644d7b6d9-57jxd -n=kube-system
    6  kubectl get nodes
    7  kubectl describe node ip-172-31-14-69.ap-south-1.compute.internal
    8  kubectl describe pod coredns-5644d7b6d9-57jxd -n=kube-system


     11  kubectl
   12  kubectl clear
   13  kubectl
   14  kubectl cluster-info
   15  kubectl get nodes
   16  kubectl get ns
   17  kubectl get pods --all-namespaces
   18  clear
   19  ls

    kubectl api-resources
    kubectl api-versions
    kubectl config
====================
13.126.180.65
ec2-user
================

1 13.234.119.207
2 13.235.134.191
3 15.206.160.19
4 13.233.84.121
5 52.66.116.130
6 15.206.172.69
7 13.235.238.201
8 3.6.41.97
9 13.126.152.32
10 13.233.198.250
11 15.206.116.20
12 15.206.91.113
13 13.233.86.54
14 13.232.48.150
15 13.232.11.164
16 13.233.183.42
17 52.66.16.239
18 13.234.32.213
19 52.66.250.104
20 13.234.239.242

TEAMMASTER

KUBERNETES Worker
=============================
1 15.206.189.156
2 13.235.90.242
3 52.66.237.58
4 13.127.210.75
5 35.154.61.241
6 15.206.179.98
7 15.206.179.168
8 13.126.217.128
9 13.234.30.40
10 13.235.71.122
11 13.233.117.169
12 13.233.145.85
13 13.127.196.51
14 13.233.192.157
15 13.232.235.7
16 13.232.178.230
17 15.206.194.194
18 15.206.186.111
19 13.232.11.153

How to delete kubeadm setup from MASTER as well NODe?
==========
https://www.devopsschool.com/blog/how-to-delete-remove-clean-existing-corrupted-or-old-kubeadm-kubernetes-clusters-setup/


rajesh@scmgalaxy.com

kubeadm join 172.31.22.148:6443 --token eda2pj.727o76zrlm46gr7s --discovery-token-ca-cert-hash sha256:d15c0106144d3197bf1fc0805a7b4d981c365c1ac95f0e7d25c92c71ab9c403a

=================================================
Working with any Resources in Kubernetes.
=============================================

Working with namespaces
-------------------------
LIST a namespaces
Create a namespaces
    2 WAY
LIST a namespaces
DESCRIBE A namespaces
EXPLAIN A namespaces
LIST a namespaces

EDIT A namespaces
    2 WAY
CONSUME A namespaces
DELETE A namespaces

345  kubectl get ns
  346  kubectl create ns pritam
  347  kubectl get ns
  348  kubectl get pods
  349  kubectl get pods --ns pritam
  350  kubectl get pods --ns=pritam
  351  kubectl get pods --n pritam
  352  kubectl get pods -n pritam
  353  kubectl get pods -n=kube-system
  354  kubectl get pods -n kube-system
  355  kubectl describe node ip-172-31-14-69.ap-south-1.compute.internal
  356  clear
  357  kubectl get pods
  358  kubectl get pods -n kube-system
  359  kubectl api-resources
  360  kubectl volumeattachments
  361  kubectl get volumeattachments
  362  kubectl get volumeattachments -n kube-system
  363  kubectl config
  364  kubectl get config
  365  kubectl cluster-info
  366  clear
  367  kubectl get nodes
  368  kubectl get ns
  369  kubectl delete ns aditya-sheshagiri manian pritam
  370  clear
  371  kubectl get ns
  372  kubectl create ns
  373  kubectl create ns rajesh
  374  clear
  375  ls
  376  kubectl get ns
  377  kubectl describe ns rajesh
  378  clear
  379  kubectl
  380  clear
  381  kubectl explain ns
  382  kubectl describe ns rajesh
  383  kubectl explain ns
  384  kubectl explain ns.spec
  385  kubectl edit ns rajesh
  386  clear
  387  ls
  388  more deploy.yaml
  389  1
  390  clear
  391  ls
  392  kubectl apply -f deploy.yaml
  393  clear
  394  ls
  395  vi pod.yaml
  396  kubectl apply -f pod.yaml
  397  clear
  398  ls
  399  kubectl get pod
  400  kubectl apply -f pod.yaml -n=rajesh
  401  kubectl get ns
  402  kubectl get pods
  403  kubectl get pods -n=rajesh
  404  clear
  405  kubectl delete ns rajesh
  406  kubectl get ns
  407  clear
  408  kubectl get pods --all-namespaces
  409  clear
  410  ls
  411  history

Working with PODS.

LIST a POD
Create a POD
        yaml
        cmd
EXPLAIN A POD
LIST a POD
DESCRIBE A POD
EDIT A POD
    Cmd -using EDIT
    YAML - using Apply
CONSUME A POD
    curl
    exec
    attach
    cp

DELETE A POD
    cmd - using delete
    yaml using delete
----------------------
apiVersion: v1
kind: Pod
metadata:
  name: hello-pod
  labels: 
    app: webserver
spec:
  containers:
  - name: hello-ctr
    image: nginx
    ports:
    - containerPort: 80


What you can edit of running pod?
-Name of the pod -> NO
[ec2-user@ip-172-31-14-69 ~]$ kubectl edit pod hello-pod
A copy of your changes has been stored to "/tmp/kubectl-edit-bmsfr.yaml"
error: At least one of apiVersion, kind and name was changed

- Namespace -> NO
Error
A copy of your changes has been stored to "/tmp/kubectl-edit-yyeeq.yaml"
error: the namespace from the provided object "rajesh1" does not match the namespace "default". You must pass '--namespace=rajesh1' to perform this operation.

- Lable -> YES
- Image -> YES


 414  kubectl get pod
  415  kubectl delete deploy edison-deployment
  416  clear
  417  kubectl get pod
  418  kubectl get pod -n=rajesh
  419  clear
  420  kubectl
  421  clear
  422  kubectl create
  423  clear
  424  kubectl explain pod
  425  kubectl explain pod.spec
  426  kubectl explain pod.spec.containers
  427  clear
  428  ls
  429  more pod.yaml
  430  kubectl create -f pod.yaml
  431  kubectl delete  -f pod.yaml
  432  kubectl create -f pod.yaml
  433  kubectl create -f pod.yaml -n=rajesh
  434  kubectl create ns rajesh
  435  kubectl create -f pod.yaml -n=rajesh
  436  kubectl get pods --all-namespaces
  437  clear
  438  ls
  439  kubectl get pods
  440  kubectl create ns rajesh1
  441  kubectl create ns rajesh2
  442  kubectl create -f pod.yaml -n=rajesh1 -n=rajesh2
  443  kubectl get pod -n=rajesh1
  444  kubectl get pod -n=rajesh2
  445  clear
  446  kubectl get pods
  447  kubectl describe pod hello-pod
  448  clear
  449  ls
  450  kubectl edit pod hello-pod
  451  kubectl get pod
  452  kubectl describe pod hello-pod
  453  clwar
  454  clear
  455  kubectl edit pod hello-pod
  456  clear
  457  kubectl edit pod hello-pod
  458  kubectl get pod
  459  kubectl edit pod hello-pod
  460  kubectl get pod
  461  kubectl edit pod hello-pod
  462  kubectl get pod
  463  clear
  464  kubectl describe pod hello-pod
  465  kubectl get pod
  466  clear
  467  kubectl edit pod hello-pod
  468  kubectl describe pod hello-pod
  469  clear
  470  vi pod.yaml
  471  kubectl apply -f pod.yaml
  472  clear
  473  kubectl get pod
  474  kubectl describe pod hello-pod
  475  clear
  476  ls
  477  kubectl get pod
  478*
  479  curl http://10.44.0.1
  480  clear
  481  ls
  482  kubectl get pod
  483  kubectl exec -it hello-pod /bin/bash
  484  kubectl attach hello-pod
  485  kubectl get pod
  486  clear
  487  ls
  488  kubectl cp pod.yaml hello-pod:/opt
  489  kubectl exec hello-pod ls /opt
  490  history
  kubectl delete -f pod.yaml




  create         Create a resource from a file or from stdin
  explain        Documentation of resources
  get            Display one or many resources
  edit           Edit a resource on the server
  delete         Delete resources by filenames, stdin, resources and names, or by resources and
label selector
describe       Show details of a specific resource or group of resources
attach         Attach to a running container
  exec           Execute a command in a container
  logs           Print the logs for a container in a pod
  cp             Copy files and directories to and from containers.
    api-resources  Print the supported API resources on the server
  api-versions   Print the supported API versions on the server, in the form of "group/version"
  config         Modify kubeconfig files
===================================

Working with Replication Controller
===================================
What is Replication Controller
Replication - 1 POD To X POD.
Controller -> X POD
-----------
apiVersion: v1
kind: ReplicationController
metadata:
  name: hello-rc
spec:
  replicas: 2   
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-ctr
        image: nginx
        ports:
        - containerPort: 80


LIST a Replication Controller
Create a Replication Controller
        yaml
        cmd
EXPLAIN A Replication Controller
LIST a Replication Controller
DESCRIBE A Replication Controller
EDIT A Replication Controller
    Cmd -using EDIT
    YAML - using Apply
CONSUME A Replication Controller
  - Scale
  - ACTUAL VS Desire.

DELETE A Replication Controller
    cmd - using delete
    yaml using delete
369  ls
  370  kubectl
  371  kubectl api-resources
  372  kubectl
  373  kubectl api-versions
  374  clear
  375  kubectl get rc
  376  kubectl create
  377  clear
  378  vi rc.yaml
  379  kubeclt create  -f rc.yaml
  380  kubectl create  -f rc.yaml
  381  kubectl get rc
  382  kubectl get pods
  383  kubectl get rc
  384  clear
  385  ls
  386  kubectl get pods
  387  kubectl explain rc
  388  kubectl explain rc.spec
  389  kubectl explain rc.spec.spec
  390  kubectl explain rc.spec
  391  kubectl explain rc.spec.template
  392  kubectl explain rc.spec.template.spec
  393  kubectl explain rc.spec.template.spec.containers
  394  clear
  395  kubectl get pods
  396  kubectl get rc
  397  kubectl describe rc hello-rc
  398  clear
  399  ls
  400  kubectl edit rc hello-rc
  401  kubectl get pods
  402  clear
  403  kubectl get pods
  404  clear
  405  kubectl get pods
  406  kubectl edit rc hello-rc
  407  clear
  408  kubectl get pods
  409  clear
  410  kubectl get pods
  411  vi rc.yaml
  412  kubectl apply -f rc.yaml
  413  kubectl get pods
  414  clear
  415  ls
  416  kubectl get pods
  417  kubectl delete pod hello-rc-9bdd4
  418  kubectl get pods
  419  clear
  420  kubectl
  421  kubectl scale
  422  clear
  423  kubectl scale --replicas=4 rc/hello-rc
  424  kubectl get pods
  425  kubectl scale --replicas=4 rc/hello-rc
  426  clear
  427  ls
  428  kubectl get rc
  429  kubectl delete rc hello-rc
  430  kubectl get pods
  431  history
